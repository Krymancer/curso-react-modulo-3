{"version":3,"sources":["components/card/index.tsx","redux/actionsTypes.ts","api/index.ts","utils/apiConstants.ts","pages/main/index.tsx","redux/actionCreator.ts","redux/reducers.ts","redux/store.ts","index.tsx"],"names":["Card","title","author","url","className","icon","GET_BOOKS","api","axios","create","baseURL","process","request","method","params","connect","state","books","getBooks","query","dispatch","a","response","type","payload","data","hits","console","log","props","useState","q","sq","sb","useEffect","placeholder","onChange","e","target","value","onClick","map","book","combineReducers","action","loading","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RA4BeA,EAhBe,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,IAC9C,OACE,sBAAKC,UAAU,OAAf,UACE,gCACE,cAAC,IAAD,CAAMC,KAAK,6BADb,IAC4CH,KAE5C,gCACE,cAAC,IAAD,CAAMG,KAAK,gBADb,IAC+BJ,KAE/B,gCACE,cAAC,IAAD,CAAMI,KAAK,WADb,IAC0BF,S,yBCtBnBG,EAAY,Y,QCGnBC,E,OAAMC,EAAMC,OAAO,CACvBC,QCJeC,mCDeFC,EARC,SACdC,EACAV,EACAW,GAEA,OAAOP,EAAIK,QAAW,CAAEC,SAAQV,MAAKW,YE0CxBC,eAFS,SAACC,GAAD,MAAiB,CAAEC,MAAOD,EAAMC,SAEhB,CAAEC,SClDlB,SAACC,GAAD,8CAAmB,WAAOC,GAAP,iBAAAC,EAAA,sEAE3B,SACNP,EAAS,CACbK,MAAOA,GAJ8B,SAMhBZ,EAAc,MAJzB,SAIqCO,GANV,OAMjCQ,EANiC,OAOvCF,EAAS,CACPG,KAAMjB,EACNkB,QAASF,EAASG,KAAKC,OATc,gDAYvCN,EAAU,CACRG,KJhBqB,cIiBrBC,QAASG,QAAQC,IAAR,QAd4B,yDAAnB,wDDkDTb,EA5CQ,SAACc,GACtB,IACA,EAAgBC,mBAAiB,IAAjC,mBAAOC,EAAP,KAAUC,EAAV,KACA,EAAoBF,mBAAiB,IAArC,mBAAOb,EAAP,KAAcgB,EAAd,KAMA,OAJAC,qBAAU,WAAO,IAAD,IACdD,EAAE,oBAACJ,EAAMZ,aAAP,aAAC,EAAaA,aAAd,QAAuB,MACxB,CAACY,IAGF,sBAAKzB,UAAU,YAAf,UACE,6BAVUO,cAWV,sBAAKP,UAAU,UAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,uBACEA,UAAU,SACV+B,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAOL,EAAGK,EAAEC,OAAOC,UAE/B,wBACEC,QAAS,WACPX,EAAMX,SAASa,IAFnB,uBAQF,qBAAK3B,UAAU,UAAf,SACGa,EAAMwB,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CAEExC,OAAQwC,EAAKxC,OACbD,MAAOyC,EAAKzC,MACZE,IAAKuC,EAAKvC,KAHLuC,EAAKzC,qB,sCEvBT0C,4BAAgB,CAC7B1B,MAfkB,WAA6E,IAA5ED,EAA2E,uDAArD,CAACC,MAAO,GAAIE,MAAO,IAAKyB,EAA6B,uCAC9F,OAAOA,EAAOrB,OAEPjB,EACI,2BACAU,GADP,IAEIC,MAAM,YAAK2B,EAAOpB,SAClBqB,SAAQ,IAGE7B,KCPd8B,EAAa,CAACC,KAILC,EAFDC,sBAAYC,EAAa,GAAIC,8BAAoBC,kBAAe,WAAf,EAAmBN,K,MCElFO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,W","file":"static/js/main.825f18cb.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Icon } from \"@iconify/react\";\n\nimport \"./index.scss\";\n\ninterface Props {\n  title: string;\n  author: string;\n  url: string;\n}\n\nconst Card: React.FC<Props> = ({ title, author, url }) => {\n  return (\n    <div className=\"card\">\n      <div>\n        <Icon icon=\"ant-design:user-outlined\" /> {author}\n      </div>\n      <div>\n        <Icon icon=\"bx:bxs-book\" /> {title}\n      </div>\n      <div>\n        <Icon icon=\"il:url\" /> {url}\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","export const GET_BOOKS = 'GET_BOOKS';\nexport const BOOKS_ERROR = 'BOOKS_ERROR';","import axios, { Method, AxiosResponse } from \"axios\";\nimport { endpoint } from \"../utils/apiConstants\";\n\nconst api = axios.create({\n  baseURL: endpoint,\n});\n\nconst request = <T>(\n  method: Method,\n  url: string, // eslint-disable-next-line\n  params?: any // params are optional and the type vary within the request\n): Promise<AxiosResponse<T>> => {\n  return api.request<T>({ method, url, params });\n};\n\nexport default request;\n","const endpoint = process.env.REACT_APP_HOST_BACKEND;\n\nexport { endpoint };\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./index.scss\";\n\nimport Card from \"../../components/card\";\nimport { book } from \"../../api/interfaces\";\nimport { connect } from \"react-redux\";\n\nimport { getBooks } from \"../../redux/actionCreator\";\n\nconst Main: React.FC = (props: any) => {\n  const title = process.env.REACT_APP_TITLE || \"Title not found in env file\";\n  const [q, sq] = useState<string>(\"\");\n  const [books, sb] = useState<book[]>([]);\n\n  useEffect(() => {\n    sb(props.books?.books ?? []);\n  }, [props]); // eslint-disable-line\n\n  return (\n    <div className=\"container\">\n      <h1>{title}</h1>\n      <div className=\"content\">\n        <div className=\"searchContainer\">\n          <input\n            className=\"search\"\n            placeholder=\"Type your search here...\"\n            onChange={(e) => sq(e.target.value)}\n          />\n          <button\n            onClick={() => {\n              props.getBooks(q);\n            }}\n          >\n            SEARCH\n          </button>\n        </div>\n        <div className=\"results\">\n          {books.map((book) => (\n            <Card\n              key={book.title}\n              author={book.author}\n              title={book.title}\n              url={book.url}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({ books: state.books });\n\nexport default connect(mapStateToProps, { getBooks })(Main);\n","import { GET_BOOKS, BOOKS_ERROR } from \"./actionsTypes\";\nimport api from \"../api/index\";\nimport { response } from \"../api/interfaces\";\n\nexport const getBooks = (query: string) => async (dispatch: any) => {\n  try {\n    const URI = 'search';\n    const params = {\n      query: query\n    };\n    const response = await api<response>(\"GET\", URI, params);\n    dispatch({\n      type: GET_BOOKS,\n      payload: response.data.hits\n    })\n  }catch(e){\n    dispatch( {\n      type: BOOKS_ERROR,\n      payload: console.log(e),\n  })\n  }\n}","import {GET_BOOKS} from './actionsTypes'; \nimport { combineReducers } from 'redux'\n\nconst bookReducer = (state: InitialState = {books: [], query: \"\"}, action: BookAction) : any => {\n  switch(action.type){\n\n    case GET_BOOKS:\n      return {\n          ...state,\n          books: [...action.payload],\n          loading:false\n      }\n\n    default: return state\n  }\n}\n\nexport default combineReducers({\n  books: bookReducer\n});","import {createStore, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\nimport rootReducer from './reducers'\n\nconst middleware = [thunk]\n\nconst store = createStore(rootReducer, {}, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport Main from \"./pages/main\";\n\nimport store from \"./redux/store\";\n\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Main />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}